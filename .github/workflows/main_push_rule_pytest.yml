name: Main push rule pytest

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  unit_test:
    runs-on: ubuntu-latest

    env:
      HUGGINGFACE_TOKEN: ${{ secrets.HF_TOKEN }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Upgrade pip and install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Cache downloaded models (./models)
        uses: actions/cache@v4
        with:
          path: ./models
          key: ${{ runner.os }}-models-${{ hashFiles('src/allocation/service_layer/download.py') }}
          restore-keys: |
            ${{ runner.os }}-models-

      - name: Cache uv dependencies and virtual environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-venv-

      - name: Create or fix virtual environment with uv
        run: |
          if [ ! -x ".venv/bin/python3" ]; then
            echo "⚠️ Detected broken or missing .venv. Recreating..."
            rm -rf .venv
            uv venv .venv
          else
            echo "✅ .venv looks valid. Skipping recreation."
          fi
          
      - name: Create virtual environment with uv (if not exists)
        run: |
          if [ ! -d ".venv" ]; then
            uv venv .venv
          fi

      - name: Install dependencies with uv
        run: uv pip install -r requirements.txt

      - name: Download model to ./models
        run: uv run python ./src/allocation/service_layer/download.py
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HF_TOKEN }}

      - name: Run unit tests
        run: uv run pytest --cov=src -vv tests/unit